# Set up a responsive prompt that includes the exit code of the last command.
#
# It's possible to easily customise the prompt with the set-promp-pattern and
# set-prompt-color functions, respectively.
#
# For example:
#
# set-prompt-color red
# set-prompt-pattern "\[\e[1;34m\]\u@\h:\[\e[1;32m\]\w\[\e[1;33m\]$ "
#
# Configures a prompt of the form "1|user@host:/working/dir$ ", where:
#
# - The optional exit code of the last command "1|" is red
# - "user@host:" is blue
# - "/working/dir" is green
# - The final "$ " is yellow
#
# The set-prompt-color function sets the PROMPT_COLOR variable, and this is the
# colour with which the prompt starts.
# 
# The set-prompt-pattern function sets the PROMPT_PATTERN variable. You can
# include other colour definitions in this prompt pattern, as you like. However,
# at least the exit code at the beginning of the prompt will have the colour
# defined in PROMPT_COLOR.
#
# In any case, at the end of the prompt, the colour is reset to the default
# terminal text colour, so you don't need to take care of this in PROMPT_PATTERN.
#
# Note: you must wrap all colour codes in \[ and \].
#------------------------------------------------------------------------------#


#------------------------------------------------------------------------------#
# Command executed each time immediately before prompt is displayed
#------------------------------------------------------------------------------#
export PROMPT_COMMAND=__set-prompt


#------------------------------------------------------------------------------#
# Set PS1 based on PROMPT_PATTERN and PROMPT_COLOR (may both be unset).
#------------------------------------------------------------------------------#
__set-prompt() {
  local exit_code=$?
  is-unset "$PROMPT_PATTERN" && export PROMPT_PATTERN=$PS1
  local p=$PROMPT_PATTERN
  [[ "$exit_code" -ne 0 ]] && local p="$exit_code|$p"
  PS1="$PROMPT_COLOR$p\[\e[0m\]"
}


#------------------------------------------------------------------------------#
# Easily change the prompt pattern (e.g."\u@\h:\w$ "). May contain colors.
#------------------------------------------------------------------------------#
set-prompt-pattern() {
  export PROMPT_PATTERN=$1
}


#------------------------------------------------------------------------------#
# Easily change the prompt color to a named color.
#------------------------------------------------------------------------------#
set-prompt-color() {
  # Bash text colour specification:
  # Format: \e[<style>;<color>m  (\e is Esc key \033, \x1B)
  # Styles: 0=normal, 1=bold, 2=dimmed, 4=underlined, 7=highlighted
  # Colors: 31=red, 32=green, 33=yellow, 34=blue, 35=purple, 36=cyan, 37=white
  local color_code
  case "$1" in
    red)    color_code=31 ;;
    green)  color_code=32 ;;
    yellow) color_code=33 ;;
    blue)   color_code=34 ;;
    purple) color_code=35 ;;
    cyan)   color_code=36 ;;
    white)  color_code=37 ;;
    *)      echo "Invalid color name: $1. Use red, green, yellow, blue, purple, cyan, or white."
            return 1 ;;
  esac
  export PROMPT_COLOR="\[\e[1;${color_code}m\]"
}


#------------------------------------------------------------------------------#
# Set concrete prompts for macOS and Linux
#------------------------------------------------------------------------------#
if is-mac; then
  set-prompt-color red
  set-prompt-pattern '$$:\w$ '
elif is-linux; then
  set-prompt-color green
  set-prompt-pattern '\u@\h:\w$ '
fi
