# ~/.bashrc.terminfo

# Location of the terminfo capabilities database, used by TODO and TODO.
export INFODB=~/.infodb

# Generate the terminfo capability information database. This database contains
# the following information about all capabilities known to terminfo:
#   1) Type: type of the capability  (boolean, numeric, or string)
#   2) Name: name of the capability (as used in the terminfo database)
#   3) Variable: C variable name of the capability in the terminfo library
#   4) Description: human-readable description of the capability
# The information is extracted from the terminfo man page. The above data fields
# are organised in tabular form with the columns separated by tabs. The order
# of the columns is as shown above. The lines are sorted alphabetically by the
# Type and Name fields.
# TODO: sort database alphabetically by the short terminfo name (currently
# is sorted by the long C variable name). Sort first by type (Boolean, Numeric,
# String), and secondly by the short terminfo name.
_infodb_create() {
  echo "Generating database in $INFODB..." >&2
  echo "# Generated by ${FUNCNAME[0]} on $(date)" >"$INFODB"
  cat $(man --path terminfo) | sed -n '/.*Variable.*Cap-.*TCap.*Description.*/,/.TE/p' | while read line; do
    case "$line" in
      *Variable*|T}|.TE) continue;;
      *Boolean**) type=Boolean;;
      *Numeric**) type=Numeric;;
      *String**) type=String;;
      *T{)
        varname=$(awk '{print $1}' <<<"$line")
        name=$(awk '{print $2}' <<<"$line");;
      *)
        description=$(tr '\t' ' ' <<<"$line")
        ready=1;;
    esac
    if [[ "$ready" = 1 ]]; then
      echo -e "$type\t$name\t$varname\t$description" >>"$INFODB"
      ready=0
    fi
  done
  # Add entries not included in the terminfo man page
  # Non-standard capabilities used by xterm, see:
  #   - https://man7.org/linux/man-pages/man5/user_caps.5.html
  #   - https://invisible-island.net/xterm/terminfo.html
  echo -e "String\tmeml\tmemory_lock\tlock memory above cursor" >>"$INFODB"
  echo -e "String\tmemu\tmemory_unlock\tunlock memory" >>"$INFODB"
}

# Retrieve one or more entries from the database by their capability name.
# Usage (examples):
#   _infodb_lookup cub1
#   _infodb_lookup cub1 cud1 cuu1 cuf1
# The data is returned in the same format as it's saved in the database.
_infodb_lookup() {
  [[ -f "$INFODB" ]] || _infodb_create
  result=$(grep "$(sed 's/^/\\t/;s/ /\\t\\|\\t/g;s/$/\\t/' <<<"$@")" "$INFODB")
  # Test if result contains all requested capabilities
  not_found=$(sed "/$(echo "$result" | cut -d $'\t' -f 2 | paste -sd ' ' - | sed 's/ /\\|/g')/d" <<<$(IFS=$'\n'; echo "$*" | sort | uniq))
  if [[ -n "$not_found" ]]; then
    echo -e "${FUNCNAME[0]}: unknown capabilities (not present in $INFODB):\n$(sed 's/^/  - /' <<<"$not_found")" >&2
    return 1
  fi
  echo "$result"
}

# Helper functions returning a portion of the infocmp output:
#   _infonames: return names of capabilities in default order
#   _infovals: return values of capabilities in defalt order
#   _infoheader: return only the header line with terminal name and aliases
# Each function outputs one item per line. Each function optionally accepts a
# terminal name as an argument. By default, the terminal in TERM is used.
_infonames() {
  infocmp -1 ${1:-$TERM} | sed '/^#/d' | sed 1d | sed 's/[,=#].*//;s/^[[:blank:]]*//'
}
_infovals() {
  infocmp -1 ${1:-$TERM} | sed '/^#/d' | sed 1d | sed 's/[^#=]*//;s/^[#=]//;s/,$//'
}
_infoheader() {
  infocmp -1 ${1:-$TERM} | sed '/^#/d' | sed -n 1p | sed 's/,$//'
}

# TODO: create single command combining all functionality:
#   infocap             # Display all capabilities of terminal in TERM
#   infocap -t <term>   # Display all capabilities of specified terminal
#   infocap <cap>...    # Display specified capabilities of terminal in TERM
#   infocap -a          # Display all capabilities known to terminfo (without values)
#   infocap -a <cap>... # Display the specified capabilities (without values)
# The 'infocap -a' variant provides the functionality of infolookup, and the
# variant without '-a' provides the functionality of infonice.
# Extension: for the variant without '-a', by default, only display the Type,
# Name, and Value columns. Add flags '-c' and '-d' to additionally display the
# Variable, and Description column. For the '-a' variant, always display all
# columns.

# Format output of infocmp in tabular form.
# Usage:
#   infonice [term]
# By default, the terminal in the TERM environment variable is used.
# The output columns include:
#   1) Capability type (boolean, numeric, or string)
#   2) Capability name
#   3) Corresponding variable name in the terminfo C library
#   4) Value (for numeric and string capabilities)
# TODO: rewrite to use ~/.infolookup database (see infolookup), then use
# something like this:
#   cat ../.infolookup | grep "$(infocmp -1 | _infonames | sed 's/^/\\t/;s/$/\\t\\|/' | tr -d '\n' | sed 's/\\|$//')" | column -t -s $'\t'
# And use 'paste' of the above with the values from the infocmp output. This
# should be much faster than the current solution.
# TODO: infoterm
# TODO: there may be capabilities in the infocmp output that are not in the
# infodb database (i.e. that are not in the terminfo man page). For example,
# meml and memu for xterm-256colors.
infonice() {
  local term=${1:-$TERM}
  local names=$(_infonames "$term")
  local values=$(_infovals "$term") 
  local header=$(_infoheader "$term")
  local info; info=$(_infodb_lookup "$names") || return 1
  echo "$header"
  paste -d '\t' <(echo "$info") <(echo "$values") | column -t -s $'\t'
#  
#  IFS=, read -r -a fields<<<$(infocmp -1 "$term" | sed '/^#/d' | sed 's/^[[:blank:]]*//' | tr -d '\n')
#  local dict=$(paste -d , <(infocmp -1x "$term" | _infonames) <(infocmp -1xL -s i "$term" | _infonames))
#  echo "${fields[0]}"
#  for i in $(seq 1 $(("${#fields[@]}"-1))); do
#    name=${fields[$i]%%[#=]*}
#    value=${fields[$i]#*[#=]}
#    longname=$(echo "$dict" | grep "^$name," | cut -d , -f 2)
#    [[ ! "${fields[$i]}" =~ [=#] ]] && type=Boolean value=
#    [[ "${fields[$i]}" =~ '#' ]] && type=Numeric
#    [[ "${fields[$i]}" =~ '=' ]] && type=String
#    echo "$i,$type,$name,$longname,$value"
#  done | column -t -s ,
}


# Look up information aboutany terminfo capabilities.
# Usage:
#   infolookup <name>...
#   infolookup '*'
# <name> is the name of any capability supported by terminfo (may be repeated).
# If '*' is given as the only argument, then all terminfo capabilities are
# printed in a compact form.
# The data is extracted from the terminfo man page. On the first run, a database
# is created in a local file. Subsequent runs then just look up the information
# from this database.
# The displayed information for each capability includes:
#   1) Type (boolean, numeric, or string)
#   2) C variable name (as used in the terminfo library)
#   3) Description 
# TODO: infocap
# TODO: print all capabilities if no arguments are given
infolookup() {
  [[ -f "$INFODB" ]] || _infodb_create
  if [[ "$1" = '*' ]]; then
    cat "$INFODB" | sed '/^#/d' | nl -w 3 | column -t -s $'\t'
  else
    for a in "$@"; do
      result=$(grep "\t$a\t" "$INFODB") || { echo "Error: $a not found" >&2; return 1; }
      echo -e "\e[1m$(echo "$result" | cut -d $'\t' -f 2)\e[0m"
      echo "  $(echo "$result" | cut -d $'\t' -f 1)"
      echo "  $(echo "$result" | cut -d $'\t' -f 3)"
      echo "  $(echo "$result" | cut -d $'\t' -f 4 | sed 's/^./\U&/;/[^\.]$/s/$/\./')"
    done
  fi
}

