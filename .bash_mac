# Mac-specific settings, sourced by ~/.bashrc if current OS is macOS.
#------------------------------------------------------------------------------#

# Use vim version installed with Homebrew
alias vim=/usr/local/bin/vim

# Convert a date string in a specific format to a UNIX timestamp in seconds.
# If the date string doesn't include a time, the current time is assumed.
#   Usage:   date2ts <date> <date_format>
#   Example: date2ts "2016-02-02 13:21:45" "%Y-%m-%d %H:%M:%S"
date2ts() {
  date -j -f "$2" "$1" '+%s'
  # Note: -j: disable setting of system date, -f: format of input date
}

# Convert a UNIX timestamp in seconds to a date string. The format of the
# output date string can be optinally specified (e.g. '+%Y-%m-%d %H:%M:%S').
#   Usage: ts2date <timestamp> [<out_format>]
ts2date() {
  if is_set "$2"; then date -r "$1" "$2"
  else                 date -r "$1"
  fi
}

# Make Finder hiding hidden files, e.g. dotfiles (default)
finder_hide() {
  defaults write com.apple.finder AppleShowAllFiles FALSE
  killall Finder
}

# Make Finder displaying hidden files
finder_show() {
  defaults write com.apple.finder AppleShowAllFiles TRUE
  killall Finder
}

# Permanently disable the Mac startup sound
disable_startup_sound() {
  sudo nvram SystemAudioVolume=%80  # %80 = 0x80 (hex) = 128 (dec)
}

# Permanently re-enable the Mac startup sound
enable_startup_sound() {
  sudo nvram -d SystemAudioVolume
}

# Merge PDF files with Mac Automator script (see usage with --help option)
mergepdf_mac() {
  "/System/Library/Automator/Combine PDF Pages.action/Contents/Resources/join.py" "$@"
}

# Kill all Mac Preview processes (PDF and image viewer)
kill-preview() {
  mykill Preview
}

# Start Google Chrome
chrome() {
  /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome "$@"
}

# Start Google Chrome in privileged mode
chrome_priv() {
  sudo /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome  --allow-file-access-from-files "$@"
}

# Render a Markdown file (default is README.md) with grip in a web-browser
grp() {
  file=${1:-README.md}
  grip "$file" &
  open http://localhost:6419/
}

# Get the bundle ID (e.g. com.apple.Preview) of an application
app-id() {
  local app_name=$1
  osascript -e "id of app \"$app_name\""
}

# Recursively remove all .DS_Store files under the current directory. If passing
# --dry as argument, only print the .DS_Store files without deleting them.
rmds() {
  if [[ "$1" = --dry ]]; then
    find . -type f \( -name .DS_Store -or -name ._.DS_Store \)
  else
    find . -type f \( -name .DS_Store -or -name ._.DS_Store \) -delete
  fi
}
